#+TITLE: Sequential Circuits
#+AUTHOR: Nathan Moos
#+DATE: 2015-10-14

* Mealy Machine
  
Outputs are a function of the states and the inputs. States feed back into the
combinational portion of the circuit. 

*Disadvantage:* Output may have a lot of glitches.

* Moore Machine

Outputs can only change when states change. The combinational portion is
separated and the state flip-flops are in series with the combinational
circuits.

*Disadvantage:* Takes more hardware.
* Components

- Flip flops
- Registers
- Counters
- Finite State Machines
- Multiplexers
- Memory
- Logic
  
** 3-instruction microprocessor

- Address bus
- Program Counter (PC)
- Instruction Register (IR)
- On-chip Random-Access Memory (RAM)
- Arithmetic Logic Unit (ALU)
- Register File (RF)
* Flip-flop

** Definition

A flip-flop can store 1 bit of information indefinitely. The clock acts as a
latch, synchronizing the output with the rest of the circuit.

** S-R (Set-Reset)
   
Two inputs: $S$ and $R$. Operation table:

| S | R | Q(t+1) | Operation |
|---+---+--------+-----------|
| 0 | 0 | Q(t)   | Hold      |
| 0 | 1 | 0      | Reset     |
| 1 | 0 | 1      | Set       |
| 1 | 1 | X      | Invalid   |

An S-R flip-flop can be controlled using Set, Reset, and Hold inputs.

** J-K
   
The S-R flip-flop has an invalid state when $SR = 11$. In order to eliminate
that, the J-K flip-flop attaches two AND gates to the input side of the S-R
flip-flop. These AND gates pair J, Q' and K, Q. Operation table:
| J | K | Q(t+1) | Operation |
|---+---+--------+-----------|
| 0 | 0 | Q(t)   | Hold      |
| 0 | 1 | 0      | Reset     |
| 1 | 0 | 1      | Set       |
| 1 | 1 | Q'(t)  | Toggle    |

This flip-flop is defined over all possible inputs.

** T (Toggle)
   
The T flip-flop is used to simply toggle the input. Operation table:
| T | Q(t + 1) | Operation |
|---+----------+-----------|
| 0 | Q(t)     | Hold      |
| 1 | Q'(t)    | Toggle    |

The T flip-flop is defined in terms of the J-K flip flop where J and K are
shorted together and called T.

** D (Data/Delay)
   
The D flip-flop is used to insert a delay. Operation table:

| D | Q(t + 1) | Operation |
|---+----------+-----------|
| 0 | 0        | Reset     |
| 1 | 1        | Set       |

The D flip-flop is defined in terms of the J-K flip-flop where J and K' are
shorted together and called D.
** Clock wire

When the clock is zero, the circuit stays in the HOLD state. This technique is
called /level-sensitive clocking/ (LSC). 

The amount of time the signal is high is usually represented as a /duty cycle/,
or the ratio of the time the signal is high to the period of the clock.

If a clock is high for too long, it can miss changes. A few ways to combat this
include:
- Narrowing the clock (setting the duty cycle lower)
- Master-slave clocking, also called pulse-triggering
- Edge-triggering
** Dual-rail Static ETL

An implementation of an S flip-flop that is very fast and space-efficient.
* Binary Counter/Divider

An essential part of many sequential circuits.

** Ripple up-counter

Say you have a series of toggle flip-flops where each $Q$ is connected to the
next flip-flop's incoming clock wire. Assuming an active-low clock wire, this
will cause the flip-flops to toggle on a clock low, which can act like a
counter. The output values from each flip-flop can be arranged to show binary
representations. This is called an /up-counter/. An $n$-bit up-counter has $2^n$
states.

A ripple up-counter is limited by flip-flop delays. A way to prevent glitches
from occuring due to these delays is to attach AND gates between each
lower-order bit.

** Ring counter

In a ring counter, which counts in a modified gray code, the clock wire is
connected to several parallel toggle flip-flops. An $n$-bit ring counter has
$n$ states.

** Johnson counter

A Johnson counter is like a ring counter that accumulates the bits it has
toggled. An $n$-bit Johnson counter has $2n$ states.
** How to make one

- Step 1 :: Draw a state diagram. 
- Step 2 :: Write a state transition table (old state $\rightarrow$ new state).
            Use the state diagram to write this. If anything is unspecified by
            the state diagram, its output can be considered "don't cares".
- Step 3 :: Write the next state as a function of the present state. Karnaugh
            maps are an excellent tool for doing so.
- Step 4 :: Select flip-flop type. Use an excitation/operation table to define
            the flip-flop variables in terms of $Q$ and $Q^+$. 
- Step 5 :: Draw Karnaugh maps to find the /excitation equation/, where you
            apply the flip-flop transform.
            
*NOTE:* It is possible that an arbitrary counter could start in a "don't cares"
state. If this happens, your counter can enter an undefined state.

*** Verification
    
Start by changing all "don't cares" in the excitation maps to the values assumed
by grouping (e.g. included in SOP expression = 1, not included = 0). Now,
re-draw the state diagram with the new values. This will allow all initial
states to be defined.

** 4-bit synchronous counter

- 4 inputs: $A$, $B$, $C$, $D$ ($D$ is MSB)
- 4 outputs: $Q_A$, $Q_B$, $Q_C$, $Q_D$ ($Q_D$ is MSB)
- Clear, Load, and Chip Enable pins

The *Load* pin sets each output pin to the same level as the input pins. The
*Clear* pin sets each output pin to 0, and the *Chip Enable* pin enables and
disables the counter. 

You can build a modulo-$N$ counter easily with this: using parallel XNOR gates
attached to each output, compare the output with $N$ and connect that with the
*Clear* pin.
* Register

A set of D flip-flops in parallel with a common clock. By using multiplexers,
you can make it possible to load registers in either serial or parallel.

Two states: *load* and *hold*. 

To load in serial, you shift all stored bits over and attach an input bit each
clock pulse.

** Linear feedback shift register

One of the most useful register applications -- randomly generates all possible
bitstrings in a range.
