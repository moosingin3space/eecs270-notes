#+TITLE: Verilog HDL
#+AUTHOR: Nathan Moos
#+DATE: 2015-09-28

* Syntax

Syntax is reminiscent of C, except that re-usable blocks are modules instead of
functions.

* Defining a full adder

#+BEGIN_SRC
module FullAdder(a, b, ci, s, co);
    input a, b, ci;
    output s, co;
    reg s, co;

    always @(a or b or ci)
    begin
        s <= a ^ b ^ ci;
        co <= (b & ci) | (a & ci) | (a & b);
    end
endmodule
#+END_SRC
  
* 4-bit Ripple-carry adder
  
#+BEGIN_SRC
module CarryRippleAdder4(a, b, ci, s, co);
    input [3:0] a;
    input [3:0] b;
    input ci;
    output [3:0] s;
    output co;

    wire co1, co2, co3;
    
    FullAdder fa1(a[0], b[0], ci, s[0], co1);
    FullAdder fa2(a[1], b[1], co1, s[1], co2);
    FullAdder fa3(a[2], b[2], co2, s[2], co3);
    FullAdder fa4(a[3], b[3], co3, s[3], co);
endmodule
#+END_SRC

* Simulation

It is easy to monitor simulated truth tables with Verilog. The following code
sets A and B, then pauses for 10 ns.

#+BEGIN_SRC
A <= 1; B <= 1; C <= 0; #10;
#+END_SRC
